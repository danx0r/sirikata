/*  Sirikata Serialization Protocol
 *  Sirikata.pbj
 *
 *  Copyright (c) 2009, Daniel Reiter Horn
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Sirikata nor the names of its contributors may
 *    be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package Sirikata.Protocol;

/////////////Standard Message Container///////////////

//This MessageBody is the standard mechanism to transport messages over the net
message MessageBody {
    reserve 1 to 6;
    reserve 1536 to 2560;
    reserve 229376 to 294912;

    //the name of the function(s) to call
    repeated string message_names=7;

    //message to be decoded by the function(s). Length must match the number of strings unless return_status set and function's length is 0
    repeated bytes message_arguments=8;

    //the message id for the function call request, so out of order messages may be detected and return values may be paired.  
    optional int64 id = 9;

    //the message is a response to a previous message.
    enum ReturnStatus {
      SUCCESS = 0;
      NETWORK_FAILURE = 1;
      SECURITY_FAILURE = 2;
    }
    optional ReturnStatus return_status=16;
}

//This is the standard message container. All items sent over the wire may be read with the following message format. It should not be used to encode message since header fields may not end up before other fields
message ReadOnlyMessage {
    reserve 1 to 6;
    reserve 1536 to 2560;
    reserve 229376 to 294912;

    //the source ObjectReference (space is implicit)
    optional uuid source_object = 1;

    //the source port from which the message originated
    optional uuid source_port = 3;

    //the spaceID origin message (in case we have a space routing messages)
    optional uuid source_space = 1536;

    //the destination ObjectReference (space is implicit) if omitted, space is destination
    optional uuid destination_object = 2;

    //the destination port that should process the message
    optional uuid destination_port = 4;

    //optional spaceID of the destination object (in case we have a space routing messages, or it is not otherwise implicit)

    optional uuid destination_space = 1537;

    //the name of the function(s) to call
    repeated string message_names=7;

    //message to be decoded by the function(s). Length must match the number of strings unless return_status set and function's length is 0
    repeated bytes message_arguments=8;

    //the message id for the function call request, so out of order messages may be detected and return values may be paired.  
    optional int64 id = 9;

    //the message is a response to a previous message.
    enum ReturnStatus {
      SUCCESS = 0;
      NETWORK_FAILURE = 1;
      SECURITY_FAILURE = 2;
    }
    optional ReturnStatus return_status=16;
}

/////////////Built-in messages///////////////

message SpaceServices {   
   optional uint32 registration_port=33;
   optional uint32 loc_port=34;
   optional uint32 geom_port=35;
   optional uint32 oseg_port=36;
   optional uint32 cseg_port=37;
   optional uint32 router_port=38;
   optional uint64 pre_connection_buffer=64;
   optional uint64 max_pre_connection_messages=65;
}

//This message is from a space to an object updating its position and orientation (returns void)
message ObjLoc {

    //time that the update was sent out
    optional time timestamp = 2;

    //position of source object
    optional vector3d position = 3;

    //orientation of source object
    optional quaternion orientation = 4;

    //velocity of the source object at snapsot
    optional vector3f velocity = 5;

    //axis of rotation of source object
    optional normal rotational_axis = 7;

    //speed of rotation around axis (may be negative)
    optional float angular_speed = 8;

    //Force update send out even if last update is within range (often useful for final resting pos)
    flags8 UpdateFlags{
           FORCE=1;
    }
    //options for this update, right now only force is the option
    optional UpdateFlags update_flags = 6;
}

//New Streams can establish an ObjectConnection
message NewObj {
    ///key to indicate how an object's ObjectReference should be restored
    optional uuid object_uuid_evidence=2;
    ///The object host may request a position for a newly created object
    optional ObjLoc requested_object_loc=3;
    ///the bounding sphere for the mesh, so that proximity detection can begin right away
    optional boundingsphere3f bounding_sphere=4;
}


//This will be in the argument for the return value of the NewObj function
message RetObj {
    //return value for NewObj message
    optional uuid object_reference = 2;
    //the definitive location of the object
    optional ObjLoc location=3;
    ///the defininitive bounding sphere for the mesh: may be smaller than the requested bounding sphere due to policy
    optional boundingsphere3f bounding_sphere=4;
}

//This message indicates an object has disconnected and should be removed from space. May only be sent by the object connection service: DelObj messages from specific objects will be ignored.
message DelObj {
   optional uuid object_reference = 2;
}

message NewProxQuery {

    //the client chosen id for this query
    optional uint32 query_id=2;

    //If present and set to true, the query is fired once, the relevant items are returned and the query is forgotten
    optional bool stateless=3;

    //the relative offset from the source object
    optional vector3f relative_center=4;

    //an absolute query center...this ignores the source object
    optional vector3d absolute_center=5;

    //query returns all objects within this many meters
    optional float max_radius=6;

    //query returns all objects that occupy at least this many steradians
    optional angle min_solid_angle=7;
}
message ProxCall {

    //the id of the query
    required uint32 query_id=2;

    //the object falling within (or falling out) of range
    required uuid proximate_object=3;

    //the type of proximity callback we are getting
    enum ProximityEvent {
        EXITED_PROXIMITY=0;
        ENTERED_PROXIMITY=1;
        STATELESS_PROXIMITY=2;
    }
    required ProximityEvent proximity_event=4;
}

// used to unregister a proximity query.
// May be sent back as a return value if space does not support standing queries
message DelProxQuery {
    //delete a query by client id
    optional uint32 query_id=2;  
}
